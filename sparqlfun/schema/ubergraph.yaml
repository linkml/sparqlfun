id: https://linkml.io/sparqlfun/ubergraph
name: ubergraph
title: sparqlfun ubergraph module
description: >-
  Abstractions for working with ubergraph
license: https://creativecommons.org/publicdomain/zero/1.0/
annotations:
  profiles: relation_graph,taxon

prefixes:
  sparqlfun_ubergraph: https://linkml.io/sparqlfun/ubergraph
  linkml: https://w3id.org/linkml/
  ubergraph: http://reasoner.renci.org/
  ubergraph_vocab: http://reasoner.renci.org/vocab/
  NCBITaxon: http://purl.obolibrary.org/obo/NCBITaxon_
  RO: http://purl.obolibrary.org/obo/RO_
  
default_prefix: sparqlfun_ubergraph
default_range: node

default_curi_maps:
  - semweb_context
#  - obo_context

imports:
  - linkml:types
  - rdf
  - ro
  - relation_graph

classes:

  ubergraph taxon class:
    is_a: taxon class
    description: all classes representing a taxon in ubergraph
    comments:
      - this query works on ubergraph-style endpoints where (1) inferred reflexive subClassOf triples are asserted (2) NCBITaxon is loaded
    annotations:
      uses_resource: NCBITaxon
      sparql.select: SELECT ?id WHERE { ?id rdfs:subClassOf NCBITaxon:1 }

  ubergraph quad:
    abstract: true
    is_a: relation graph quad
    description: a quad in an ubergraph endpoint

  normalized information content triple:
    is_a: triple
    classification_rules:
      - is_a: triple
        slot_conditions:
          predicate:
            equals_string: ubergraph_vocab:normalizedInformationContent

  SubClass count triple:
    is_a: triple
    classification_rules:
      - is_a: triple
        slot_conditions:
          predicate:
            equals_string: ubergraph_vocab:subClassCount

  is a or part of:
    is_a: ubergraph quad
    classification_rules:
      - is_a: triple
        exactly_one_of:
          - slot_conditions:
              predicate:
                equals_string: rdfs:subClassOf
          - slot_conditions:
              predicate:
                equals_string: BFO:0000050
    annotations:
      sparql.select: SELECT * WHERE { GRAPH ?graph { ?subject ?predicate ?object . VALUES ?predicate { rdfs:subClassOf BFO:0000050 } } }


  class taxon exclusion via never in:
    description: |-
      An inferred never-in between a subject term and an object taxon, which holds
      when the inferred direct taxon is not in an ancestry relationship with the object taxon
    slots:
      - subject_predicate
      - class_with_constraint
      - direct_taxon
    slot_usage:
      subject:
        description:
          The class inferred to have the constraint
      object:
        description:
          The taxon that cannot have the subject class.
    is_a: triple
    mixins:
      - taxon applicable
    annotations:
      sparql.select: |-
        SELECT * WHERE {
          ?subject ?subject_predicate ?class_with_constraint .
          ?class_with_constraint RO:0002161 ?direct_taxon .
          FILTER EXISTS { ?object rdfs:subClassOf ?direct_taxon }
        }

  class taxon exclusion via only in:
    slots:
      - subject_predicate
      - class_with_constraint
      - direct_taxon
    slot_usage:
      subject:
        description:
          The class inferred to have the constraint
      object:
        description:
          The taxon that cannot have the subject class.
    is_a: triple
    mixins:
      - taxon applicable
    annotations:
      sparql.select: |-
        SELECT * WHERE {
          ?subject ?subject_predicate ?class_with_constraint .
          ?class_with_constraint RO:0002162 ?direct_taxon .
          FILTER NOT EXISTS { ?object (rdfs:subClassOf|^rdfs:subClassOf) ?direct_taxon }
        }

  class taxon exclusion:
    slots:
      - subject_predicate
      - class_with_constraint
      - direct_taxon
    slot_usage:
      subject:
        description:
          The class inferred to have the constraint
      object:
        description:
          The taxon that cannot have the subject class.
    is_a: triple
    mixins:
      - taxon applicable
    annotations:
      sparql.select: |-
        SELECT * WHERE {
         {
          ?subject ?subject_predicate ?class_with_constraint BIND(RO:0002162 as ?predicate) .
          ?class_with_constraint RO:0002162 ?direct_taxon .
          FILTER NOT EXISTS { ?object (rdfs:subClassOf|^rdfs:subClassOf) ?direct_taxon }
         }
         UNION
         {
          ?subject ?subject_predicate ?class_with_constraint BIND(RO:0002161 as ?predicate).
          ?class_with_constraint RO:0002161 ?direct_taxon .
          FILTER EXISTS { ?object rdfs:subClassOf ?direct_taxon }
         }
        }

  setwise common SubClass ancestor:
    description: Common superclass ancestor to a set of nodes
    slots:
      - nodes
      - ancestor
    annotations:
      sparql.select: |-
        SELECT ?ancestor WHERE {
          VALUES ?sub { {{ _values(nodes) }} }
          ?sub rdfs:subClassOf ?ancestor .
          FILTER(isIRI(?ancestor))
        }

  setwise most recent common SubClass ancestor:
    description: Most recent common superclass ancestor to a set of nodes
    slots:
      - nodes
      - ancestor
    annotations:
      sparql.select: |-
        SELECT ?ancestor WHERE {
          VALUES ?sub { {{ _values(nodes) }} }
          ?sub rdfs:subClassOf ?ancestor .
          FILTER(isIRI(?ancestor)) .
          FILTER NOT EXISTS {
                      VALUES ?sub2 { {{ _values(nodes) }} }
                      ?sub2 rdfs:subClassOf ?a2 .
                      ?a2 rdfs:subClassOf ?ancestor .
                      FILTER(?a2 != ?ancestor)
                      FILTER(isIRI(?a2))
          }
        }

  pairwise common ancestor:
    description: Common ancestor in relation graph over any relations between two nodes
    slots:
      - node1
      - node2
      - predicate1
      - predicate2
      - ancestor
    annotations:
      sparql.select: |-
        SELECT * WHERE {
          ?node1 ?predicate1 ?ancestor .
          ?node2 ?predicate2 ?ancestor .
        }

  pairwise common SubClass ancestor:
    is_a: pairwise common ancestor
    classification_rules:
      - is_a: pairwise common ancestor
        slot_conditions:
          predicate1:
            equals_string: rdfs:subClassOf
          predicate2:
            equals_string: rdfs:subClassOf

  pairwise most recent common ancestor:
    description: Common non-redundant ancestor in relation graph over any relations between two nodes
    slots:
      - node1
      - node2
      - predicate1
      - predicate2
      - ancestor
    annotations:
      sparql.select: |-
        SELECT * WHERE {
          ?node1 ?predicate1 ?ancestor .
          ?node2 ?predicate2 ?ancestor .
          FILTER NOT EXISTS {
            ?a2 (?predicate1|?predicate2|rdfs:subClassOf) ?ancestor .
            ?node1 ?predicate1 ?a2 .
            ?node2 ?predicate2 ?a2 .
            FILTER(?a2 != ?ancestor)
          }
        }

  pairwise most recent common SubClass ancestor:
    description: Common non-redundant SubClass ancestor between two nodes
    slots:
      - node1
      - node2
      - ancestor
    annotations:
      sparql.select: |-
        SELECT * WHERE {
          ?node1 rdfs:subClassOf ?ancestor .
          ?node2 rdfs:subClassOf ?ancestor .
          FILTER NOT EXISTS {
            ?a2 rdfs:subClassOf ?ancestor .
            ?node1 rdfs:subClassOf ?a2 .
            ?node2 rdfs:subClassOf ?a2 .
            FILTER(?a2 != ?ancestor)
          }
        }

  pairwise common descendant:
    description: Common descendant in relation graph over any relations between two nodes
    slots:
      - node1
      - node2
      - predicate1
      - predicate2
      - descendant
      - is_direction_canonical
    annotations:
      sparql.select: |-
        SELECT * WHERE {
          ?descendant ?predicate1 ?node1 .
          ?descendant ?predicate1 ?node2
          FILTER (?node1 != ?node2) .
          BIND( str(?node1) < str(?node2) AS ?is_direction_canonical)
        }

  pairwise common SubClass descendant:
    is_a: pairwise common descendant
    classification_rules:
      - is_a: pairwise common descendant
        slot_conditions:
          predicate1:
            equals_string: rdfs:subClassOf
          predicate2:
            equals_string: rdfs:subClassOf

  pairwise common descendant matrix:
    description: Common descendant in relation graph over any relations between two nodes from two axes
    slots:
      - node1
      - node2
      - node1_candidates
      - node2_candidates
      - predicate1
      - predicate2
      - descendant
    annotations:
      sparql.select: |-
        SELECT * WHERE {

          ?descendant ?predicate1 ?node1 .
          ?descendant ?predicate1 ?node2 .
          FILTER (?node1 = ?node1_candidates)
          FILTER (?node2 = ?node2_candidates)
        }

  pairwise common SubClass descendant matrix:
    is_a: pairwise common descendant matrix
    classification_rules:
      - is_a: pairwise common descendant matrix
        slot_conditions:
          predicate1:
            equals_string: rdfs:subClassOf
          predicate2:
            equals_string: rdfs:subClassOf


  obo class filtered:
    is_a: class node
    class_uri: owl:Class
    slots:
      - definition
      - exact_synonyms
    annotations:
      sparql.construct: |-
        CONSTRUCT {
          ?id a owl:Class ;
              IAO:0000115 ?definition ;
              oboInOwl:hasExactSynonym ?exact_snonyms
        }
        WHERE {
          ?id a owl:Class .
          OPTIONAL { ?id IAO:0000115 ?definition } .
          OPTIONAL { ?id oboInOwl:hasExactSynonym ?exact_snonyms } .
          {% if query_has_subclass_ancestor %}
          ?id rdfs:subClassOf ?query_has_subclass_ancestor
          {% endif %}
        }

slots:
  ancestor:
  descendant:
  node1:
  node2:
  is_direction_canonical:
    range: boolean
  node1_candidates:
    multivalued: true
  node2_candidates:
    multivalued: true
  nodes:
    multivalued: true
  predicate1:
    is_a: predicate
  predicate2:
    is_a: predicate
  subject_predicate:
  class_with_constraint:
  direct_taxon:
  query_has_subclass_ancestor:


    
